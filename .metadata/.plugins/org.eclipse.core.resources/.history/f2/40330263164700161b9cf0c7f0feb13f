package source;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class ContactLetter_CVPatterns {

	//public int cipherTextLength = 0;
	public int cipherTextPrevStart = 0;
	public int cipherTextStart = 0;
	public int cipherTextEnd = 0;
	
	//public String cipherPattern = "";
	
	public static String vowel = "aeiouy";
	public static String consonant = "bcdfghjklmnpqrstvwxz";
	public static ArrayList<String[]> patterns = new ArrayList<String[]>();
	
	public void initPatternArrays() throws IOException
	{
		patterns.clear();
		BufferedReader reader = new BufferedReader(new FileReader("patterns_book_COPY.txt"));
		String line = "";
		
		while((line = reader.readLine()) != null)
		{
			String[] array = line.split("-")[1].split(",");
			patterns.add(array);
		}
		
		reader.close();
	}
	
	public boolean testPattern(String word) throws IOException
	{
		//String[] cipherArr = cipherPattern.split("_");
		//String word = cipherPattern;//cipherArr[cipherArr.length - 1];
		
		String pattern = getPattern(word);
		
		//System.out.println("IN TEST PATTERN: " + word + " " + pattern);
		
		if(pattern.length() != word.length())
		{
			System.out.println("ERROR: Length differs");
		}
		
		if(pattern.length() > 0)// && pattern.length() < 9)
		{
			for(int i = 0; i < patterns.get(pattern.length() - 1).length; ++i)
			{
				//System.out.println(pattern + " " + patterns.get(pattern.length() - 1)[i]);
				if(pattern.equals(patterns.get(pattern.length() - 1)[i]))
				{	
					//System.out.println("PATTERN EXISTS IN LIST");
					return true;
				}
			}
		}
		//System.out.println("PATTERN DOES NOT EXIST IN LIST");
		return false;
	}
	
	public static String getPattern(String word)
	{
		String pattern = "";
		
		for(int i = 0; i < word.length(); ++i)
		{
			String letter = Character.toString(word.charAt(i));
			
			if(vowel.contains(letter))
			{
				pattern += "V";
			}
			else if(consonant.contains(letter))
			{
				pattern += "C";
			}
		}
		
		//System.out.println(pattern);
		return pattern;
	}
}
