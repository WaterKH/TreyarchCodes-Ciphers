package source;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class CryptogramBF_MAIN {
	
	public static String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	public static Map<String, Integer> containedChars = new HashMap<String, Integer>();
	
	public static void main(String[] args) throws IOException
	{
		System.out.println("Cryptogram Program");
		
		String cipherText = readInCipherText();
		System.out.println(cipherText);
		
		int[] perms = new int[containedChars.size()];
		int[] radices = new int[containedChars.size()];
		
		boolean finished = false;
		
		while(!finished)
		{
			perms[0] += 1;
			
		    if (perms[0] >= radices[0])
		    {
		      int radixsub = 0;
		      while (radices[radixsub] <= perms[radixsub])
		      {
		        perms[radixsub] = 0;
		        radixsub += 1;
		        if (radixsub >= radices.length)
		        {
		        	finished = true;
		            break;
		        } // if (radixsub >= perms.size())
		        perms[radixsub] += 1;
		      } // while (perms.at(radixsub) == limitOfPermutations)
	      
		    } // if (perms.at(0) == limitOfPermutations) 
		}
	}
	
	public static String readInCipherText() throws IOException
	{
		String returnString = "";
		File file = new File("CipherText.txt");
		BufferedReader reader = new BufferedReader(new FileReader(file));
		String line = "";
		
		while((line = reader.readLine()) != null)
		{
			for(String part : line.split(""))
			{
				if(!containedChars.containsKey(part))
				{
					containedChars.put(part, 0);
				}

				returnString += part;
			}
		}
		
		reader.close();
		
		return returnString;
	}

}
