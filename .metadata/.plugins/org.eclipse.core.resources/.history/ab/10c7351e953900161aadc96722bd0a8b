package source;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class ADFGX_NiceLookingOne {
	
	static Map<Character, ArrayList<String>> columnMap = new HashMap<Character, ArrayList<String>>();
	static ArrayList<String> letterPairs = new ArrayList<String>();
	public static File currentFile;
	static Alphabet alphabet = new Alphabet();
	
	public static void main(String[] args) throws IOException
	{
		/*	START DECISION: Decide if encrypting or decrypting	*/
		boolean isEncrypting = false;
		
		System.out.println("Are you encrypting a message? (Y) or (N)");
		Scanner keyboard = new Scanner(System.in);
		String answer = keyboard.next();
		
		if(answer.toLowerCase().equals("y"))
		{
			isEncrypting = true;
		}
		else
		{
			isEncrypting = false;
		}
		
		/*	END DECISION: Decide if encrypting or decrypting	*/
		
		//System.out.println("Provide a keyword:	");
		//String keyword = keyboard.next();
		
		if(isEncrypting)
		{
			// TODO Perform encryption
			BufferedReader readerCipherText = Resources.openFile_Reader("adfgxPlainText");
			String line = "";
			String plainText = "";
			
			while((line = readerCipherText.readLine()) != null)
			{
				plainText += line;
			}
			
			String cipherText = encryptPlainText(plainText);
			System.out.println(plainText);
			System.out.println(cipherText);
			
			//sortIntoColumns(cipherText, keyword);
		}
		else
		{
			BufferedReader reader = new BufferedReader(new FileReader("CipherKeys2.txt"));
			BufferedWriter writer = new BufferedWriter(new FileWriter("CipherCryptos.txt"));
			String keyword = "";
			String patternSymbols = "abcdefghijklmnopqrstuvwxyz";
			
			while((keyword = reader.readLine()) != null)
			{
				String plaintext = "";
				//TODO Perform decryption
				preinitColumnarTransposition(keyword);
				initColumnarTransposition(keyword);
				for(int i = 0; i < letterPairs.size(); ++i)
				{
					int[] indexes = getAlphabetIndexFromLetterPair(i);
					plaintext += alphabet.alphabet[indexes[0]][indexes[1]];
				}
				
				System.out.println(keyword + " " + plaintext);
				Map<String, Integer> patternHolder = new HashMap<String, Integer>();
				
				for(int i = 0; i < plaintext.length(); ++i)
				{
					
				}
			}
			
		}
	}

	public static String encryptPlainText(String plainText)
	{
		String cipherText = "";
		int counter = 0;
		
		for(int i = 0; i < plainText.length(); ++i)
		{
			int[] chars = getAlphabetIndexFromCharacters(Character.toString(plainText.charAt(counter)));
			cipherText += ADFGX_FROM_INDEX(chars);
			++counter;
		}
		
		return cipherText;
	}
	
	public static void sortIntoColumns(String cipherText, String keyword)
	{
		Map<Integer, String> cipherTextHolder = new HashMap<Integer, String>();
		int counter = 0;
		
		for(int i = 0; i < cipherText.length(); ++i)
		{
			if(counter == 6)
			{
				counter = 0;
			}
			
			if(!cipherTextHolder.containsKey(counter))
			{
				cipherTextHolder.put(counter, Character.toString(cipherText.charAt(i)));
			}
			else
			{
				cipherTextHolder.put(counter, cipherTextHolder.get(counter) + cipherText.charAt(i));
			}
			++counter;
		}
		
		System.out.println(cipherTextHolder);
		
		
	}
	
	/************************************************************************
	  * 
	  * We create two integer variables - one that tracks rows and one that 
	  *	  we will return as our row length. We then open our ciphertext and 
	  *	  create a file "adfgxMapped." We create a string will be our line  
	  *	  in the ciphertext. We also create a pre-defined array since we
	  *   know what our ciphertext size is and fill it with dummy values.
	  *   
	  * While we still have text, we split each string by whitespace+ and then
	  *  run an array on that part's length. We then add to our pre-defined array
	  *  the character at the current index. This is down until we reach the end
	  *  of our row, then we go to the next row and repeat. Once our numberOfRows
	  *  is equal to 12, we break out of this loop.
	  * 
	  * Print out the results to a file/ console and close the files. 
	  *  
	  *  
	  *  @throws IOException 
	  */
	private static void preinitColumnarTransposition(String columnDelim) throws IOException
	{
		int numberOfRows = 0;
		int individualRow = 0;
		
		BufferedReader readerCipherText = Resources.openFile_Reader("adfgxCipherText");
		BufferedWriter writer = Resources.openFile_Writer("adfgxMapped");
		String lineCipherText = "";
		String[][] mappedADFGX = new String[12][6];
		
		for(int i = 0; i < mappedADFGX.length; ++i)
		{
			for(int j = 0; j < mappedADFGX[i].length; ++j)
			{
				mappedADFGX[i][j] = "-";
			}
		}
		
		// Gets Rows
		while((lineCipherText = readerCipherText.readLine()) != null)
		{
			for(String part : lineCipherText.split("\\s+"))
			{
				for(int i = 0; i < part.length(); ++i)
				{
					mappedADFGX[numberOfRows][individualRow] = Character.toString(part.charAt(i));
					++individualRow;
					
					if(individualRow == columnDelim.length())
					{
						++numberOfRows;
						
						if(numberOfRows == 12)
							break;
						
						individualRow = 0;
					} // if(trackOfRows == colDelim.length())
					
				} // for(int i = 0; i < part.length(); ++i)

			} // for(String part : line)
			
		} // for(String line : Files.readAllLines)
		
		for(int i = 0; i < mappedADFGX.length; ++i)
		{
			for(int j = 0; j < mappedADFGX[i].length; ++j)
			{
				writer.write(mappedADFGX[i][j] + " ");
				System.out.print(mappedADFGX[i][j] + " ");
			}
			writer.newLine();
			System.out.println();
		}
			
		Resources.closeFile(writer, "adfgxMapped");
		Resources.closeFile(readerCipherText, "adfgxCipherText");
	}
	
	/************************************************************************
	 * 
	 * We take in an input key which we convert to a char array to sort, then
	 * 	convert it back to a string. We open a file named "adfgxMapped"
	 *  The text wrap is dependent upon the inputKey's length. We then create a 
	 *  double array based on our column length and our row size and read in from
	 *  the "adfgxMapped" to create a matrix that we can then use to create
	 *  a map of our columns so that we can create the "adfgxSolved" file.
	 *  
	 * We then create "adfgxSolved" and an empty String. We run a double loop
	 *  on our row size(j) and column size(i) and write to file the correct
	 *  positioning of the columns.
	 * 
	 * @param String inputKey
	 * @throws IOException
	 */
	public static void initColumnarTransposition(String inputKey) throws IOException
	{	
		String lineMapped = "";
		int col = 0;
		BufferedReader readerMapped = Resources.openFile_Reader("adfgxMapped");
		
		ArrayList<ArrayList<String>> holderForText = new ArrayList<ArrayList<String>>();
		char[] individualChars = inputKey.toCharArray();
		
		for(int i = 0; i < 6; i++)  
		{
	        holderForText.add(new ArrayList<String>());
	    } // for(int i = 0; i < finalRowCount; i++)  
		
		while((lineMapped = readerMapped.readLine()) != null)
		{
			for(String part : lineMapped.split("\\s+"))
			{	
				holderForText.get(col).add(part);

				++col;
			} // for(String part : line)
			col = 0;
		} // while((lineMapped = readerMapped.readLine()) != null)
		
		Resources.closeFile(readerMapped, "adfgxMapped");
		
		Arrays.sort(individualChars);
		String columnDelim = new String(individualChars);
		
		for(int tempCol = 0; tempCol < columnDelim.length(); ++tempCol)
		{
			columnMap.put(columnDelim.charAt(tempCol), holderForText.get(tempCol));
		} // for(int tempCol = 0; tempCol < colDelim.length(); ++tempCol)
		
		
		BufferedWriter writer = Resources.openFile_Writer("adfgxSolved");
		String str = "";
		Map<String, Integer> contained = new HashMap<String, Integer>();
		
		System.out.println();
		for(int i = 0; i < inputKey.length(); ++i)
		{
			System.out.print(inputKey.charAt(i) + " ");
		}
		System.out.println();
		System.out.println();
		
		for(int j = 0; j < columnMap.get(inputKey.charAt(0)).size(); ++j)
		{
			for(int i = 0; i < columnMap.size(); ++i)
			{
				if(columnMap.containsKey(inputKey.charAt(i)))
				{
					writer.write(columnMap.get(inputKey.charAt(i)).get(j) + " ");
					
					if(!columnMap.get(inputKey.charAt(i)).get(j).equals("-"))
					{
						str += columnMap.get(inputKey.charAt(i)).get(j);
					} // if(!columnMap.get(inputKey.charAt(i))[j].equals("-"))
					
					System.out.print(columnMap.get(inputKey.charAt(i)).get(j) + " ");
					
					if(str.length() == 2)
					{
						letterPairs.add(str);
						if(!contained.containsKey(str))
						{
							contained.put(str, 0);
							//++uniqueLetters;
						}
						
						str = "";
					} // if(str.length() == 2)
					
				} // if(columnMap.containsKey(inputKey.charAt(i)))
				
			} // for(int i = 0; i < columnMap.size(); ++i)
			System.out.println();
			writer.newLine();
		} // for(int j = 0; j < columnMap.get(inputKey.charAt(0)).length; ++j)
		
		Resources.closeFile(writer, "adfgxSolved");
		//System.out.println(letterPairs.size());
		//currentFile.delete();
	} /** public static void sortColumnarTransposition(String inputKey) throws IOException **/
	
	/************************************************************************
	 * 
	 * Accessor
	 * 
	 * Returns the index of where the letter we want should be. 
	 * 	!!NOTE!! This should be used with a loop over letterPairs size
	 *  
	 * 
	 * @param int index
	 * @returns tempHolder
	 */
	public static int[] getAlphabetIndexFromLetterPair(int index)
	{
		int[] polybiusSquareIndex = new int[2];
		
		for(int k = 0; k < letterPairs.get(index).length(); ++k)
		{
			polybiusSquareIndex[k] = ADFGX_Subs(letterPairs.get(index).charAt(k));
		} // for(int k = 0; k < letterPairs.get(i).length(); ++k)
		
		return polybiusSquareIndex;
	} /** public static int[] getAlphabetIndexFromListIndex(int index) **/
	
	/************************************************************************
	 * 
	 * Accessor
	 * 
	 * Returns the index of where the letter we want should be. 
	 * 	!!NOTE!! This should be used with a loop over letterPairs size
	 *  
	 * 
	 * @param String chars
	 * @returns tempHolder
	 */
	public static int[] getAlphabetIndexFromCharacters(String character)
	{
		int[] polybiusSquareIndex = new int[2];
		
		for(int i = 0; i < alphabet.alphabet.length; ++i)
		{
			for(int j = 0; j < alphabet.alphabet[i].length; ++j)
			{
				if(alphabet.alphabet[i][j].equals(character))
				{
					polybiusSquareIndex[0] = i;
					polybiusSquareIndex[1] = j;
					
					return polybiusSquareIndex;
				}
			}
		}
		
		// Return within loop
		return null;
	} /** public static int[] getAlphabetIndexFromCharacters(String chars) **/
	
	/************************************************************************
	 * 
	 * We switch on the value given by the parameter and return an integer
	 *  depending on the letter value we are given.
	 *  
	 * 
	 * @param char value
	 * @returns tempVal
	 */
	public static int ADFGX_Subs(char value)
	{
		int tempVal;
		switch(value)
		{
		case 'A':
			tempVal = 0;
			break;
		case 'D':
			tempVal = 1;
			break;
		case 'F':
			tempVal = 2;
			break;
		case 'G':
			tempVal = 3;
			break;
		case 'X':
			tempVal = 4;
			break;
		default:
			tempVal = -1;
			break;
		} // switch(value)
		return tempVal;
	} /** private static int ADFGX_Subs(char value) **/
	
	public static String ADFGX_FROM_INDEX(int[] index)
	{
		String tempStringVal = "";
		for(int i = 0; i < index.length; ++i)
		{
			switch(index[i])
			{
			case 0:
				tempStringVal += "A";
				break;
			case 1:
				tempStringVal += "D";
				break;
			case 2:
				tempStringVal += "F";
				break;
			case 3:
				tempStringVal += "G";
				break;
			case 4:
				tempStringVal += "X";
				break;
			default:
				tempStringVal += "P";
				break;
			} // switch(value)
		}
		return tempStringVal;
	} /** private static int ADFGX_Subs(char value) **/
}
