package source;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactLetter_MAIN {

	public static void main(String[] args) throws IOException 
	{
		String alphabet = "abcdefghijklmnopqrstuvwxyz ";
		Map<String, ContactLetters> listOfContacts = new HashMap<String, ContactLetters>();
		
		for(int i = 0; i < alphabet.length(); ++i)
		{
			String key = Character.toString(alphabet.charAt(i));
			
			listOfContacts.put(key, new ContactLetters(key));
		}
		
		BufferedReader reader = new BufferedReader(new FileReader("Moby_Dick_FORMAT.txt"));
		String line = "";
		int counter = 0;
		
		System.out.println("Started Reading");
		
		while((line = reader.readLine()) != null)
		{
			String previousLetter = "";
			String followingLetter = "";
			
			for(String letter : line.split(""))
			{
				letter = letter.toLowerCase();
				ContactLetters contactLetter = listOfContacts.get(letter);
				
				if(counter > 0)
				{
					previousLetter = Character.toString(line.charAt(counter - 1));
					contactLetter.addToBefore(previousLetter);
					contactLetter.increaseBeforeTotalContactLetters();
				}
				
				if(counter < line.length() - 1)
				{
					followingLetter = Character.toString(line.charAt(counter + 1));
					contactLetter.addToAfter(followingLetter);
					contactLetter.increaseAfterTotalContactLetters();
				}
				
				++counter;
			}
		}
		reader.close();

		System.out.println("Finished Reading");
	
		BufferedWriter writer = new BufferedWriter(new FileWriter("percentagesOfContactLetters_MOBYDICK(TOTAL).txt"));
		
		for(int i = 0; i < alphabet.length(); ++i)
		{
			String letter = Character.toString(alphabet.charAt(i));
			for(int j = 0; j < alphabet.length(); ++j)
			{
				String percLetter = Character.toString(alphabet.charAt(j));
				
				DecimalFormat df = new DecimalFormat("#.####");
				df.setRoundingMode(RoundingMode.CEILING);
				
				writer.write(letter + "," + percLetter + "," + df.format(listOfContacts.get(letter).getBeforePercentage(percLetter) / counter) 
						+ "," + df.format(listOfContacts.get(letter).getAfterPercentage(percLetter) / counter));
				writer.newLine();
			}
			writer.newLine();
		}
		
		writer.close();
		System.out.println("Finished Program");
		
		BufferedReader perc_reader = new BufferedReader(new FileReader("percentages.txt"));
		line = "";
		Map<String, ArrayList<String>> percHolder = new HashMap<String, ArrayList<String>>(); 
		while((line = perc_reader.readLine()) != null)
		{
			String key = line.split("-")[0];
			ArrayList<String> strings = new ArrayList<String>();
			System.out.println(line);
			for(String part: line.split("-")[1].split(","))
			{
				
				strings.add(part);
			}
			
			percHolder.put(key, strings);
		}
		
		startPermutations(percHolder);
	}
	
	public static void startPermutations(Map<String, ArrayList<String>> percHolder)
	{
		// TODO Idea is that we get every beginning letter - We get this by using our space - Then using that letter,
		// we pass get into our dictionary
		
		ArrayList<String> spaceList = percHolder.get("_");
		
		for(int i = 0; i < spaceList.size(); ++i)
		{	
			String runningString = spaceList.get(i);
			permutations(spaceList.get(i), runningString, percHolder);
		}
		
	}
	
	public static void permutations(String checkForNext, String runningString, Map<String, ArrayList<String>> percHolder)
	{
		for(int i = 0; i < percHolder.size(); ++i)
		{
			runningString += percHolder.get(checkForNext).get(i);
			permutations(percHolder.get(checkForNext).get(i), runningString, percHolder);
			runningString = runningString.substring(0, runningString.length() - 2);
		}
		checkPattern(runningString);
	}
	
	public static void checkPattern(String patternString)
	{
		String alphabet = "abcdefghiklmnopqrstuvwxyz";
		
		Map<Character, Integer> patternHolder = new HashMap<Character, Integer>();
		int counter = 0;
		String runningString = "";
		
		for(int i = 0; i < patternString.length(); ++i)
		{
			if(patternHolder.containsKey(patternString.charAt(i)))
			{
				runningString += alphabet.charAt(patternHolder.get(patternString.charAt(i)));
			}
			else
			{
				runningString += alphabet.charAt(counter);
				patternHolder.put(patternString.charAt(i), counter);
				++counter;
			}
		}
		
		BufferedReader reader = null;
		
		try {
			reader = new BufferedReader(new FileReader("ADFGX_Cryptograms.txt"));
			
			String line = "";
			
			while((line = reader.readLine()) != null)
			{
				if(patternString.equals(line))
				{
					System.out.println("Hoeeee boiii");
				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

}
